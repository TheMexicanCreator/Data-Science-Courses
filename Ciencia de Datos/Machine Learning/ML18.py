Python 3.9.10 (v3.9.10:f2f3f53782, Jan 13 2022, 17:02:14) 
[Clang 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license()" for more information.
>>> #Ejercicio 1
>>> import os
>>> os.getcwd()
'/Users/robertogarcia/Documents'
>>> os.chdir('/Users/robertogarcia/Documents/Ciencia de Datos/Machine Learning')
>>> import pandas as pd
df=
>>> df= pd.read_csv('Tweets.csv')
>>> df= df[['text','airline_sentiment']]
>>> import re
>>> r= re.compile(r"([@])(\w+)\b")
>>> AllReferences= map(lambda x: r.findall(x),df['text'])
>>> import itertools
>>> AllUniqueReferencesCombined= set(list(itertools.chain.from_iterable(AllReferences)))
>>> References= map(lambda x:x[0]+x[1],AllUniqueReferencesCombined)
>>> file= open("References.txt")
Traceback (most recent call last):
  File "<pyshell#13>", line 1, in <module>
    file= open("References.txt")
FileNotFoundError: [Errno 2] No such file or directory: 'References.txt'
>>> file= open("References.txt", 'a')
>>> for each in References:
	file.write(each+"\n")

	
10
17
12
11
16
12
9
16
7
7
15
8
10
12
11
15
12
8
11
10
10
10
13
8
15
10
15
10
15
12
14
5
16
11
16
12
11
13
9
14
11
12
11
5
5
16
17
17
10
12
12
11
11
13
14
16
15
12
15
12
11
8
14
17
8
5
14
12
11
10
17
13
9
10
20
12
15
14
12
17
17
15
11
10
17
5
13
13
14
10
12
15
15
15
17
15
15
13
13
10
13
12
17
9
13
8
13
9
8
5
17
14
11
12
14
10
17
13
17
10
7
13
9
14
11
13
17
9
9
17
16
12
9
14
12
12
13
11
10
15
15
11
11
9
10
9
14
10
13
11
17
13
11
8
12
15
11
11
17
10
14
14
16
8
13
13
15
16
8
14
10
12
14
14
12
5
12
13
9
8
11
15
9
14
8
17
14
3
17
6
10
17
12
8
14
16
12
14
17
14
10
12
14
8
9
14
14
12
11
12
13
9
16
9
13
15
12
17
10
15
10
12
14
10
8
15
17
4
13
11
17
17
17
17
13
10
11
9
16
10
13
14
12
14
11
9
16
16
15
9
7
10
5
10
10
9
12
14
17
14
10
13
14
11
11
11
14
13
10
14
9
13
7
12
12
10
16
6
12
9
8
17
8
13
11
16
15
12
13
16
8
11
12
11
11
8
15
15
12
13
15
16
16
15
13
16
15
9
14
14
10
6
9
13
17
12
9
15
16
12
14
16
15
13
11
16
13
14
13
17
7
12
13
10
17
16
15
8
8
10
17
12
7
15
5
14
9
11
10
5
13
13
13
17
8
14
11
5
12
11
16
17
15
15
11
15
11
14
16
15
17
14
14
13
11
13
13
11
12
14
8
14
15
16
14
10
13
17
5
17
9
5
11
10
13
6
10
16
17
11
11
17
8
12
11
11
13
15
16
9
17
11
16
17
13
6
5
12
7
11
17
10
13
11
15
6
11
10
10
15
8
15
14
10
7
16
17
16
14
9
12
10
8
10
10
15
4
11
11
17
8
10
16
12
16
11
13
13
17
13
9
17
13
5
15
15
11
11
14
13
16
12
10
11
17
15
11
14
14
14
15
15
10
17
16
15
17
9
16
17
7
10
16
9
9
16
9
14
15
14
15
8
15
14
15
6
13
16
15
14
10
10
11
16
14
14
15
16
14
12
14
14
16
14
8
5
15
11
17
10
13
10
14
17
11
10
8
4
12
13
15
13
11
12
5
17
8
15
17
12
14
16
16
13
17
15
11
10
14
9
12
10
13
13
9
11
11
15
12
12
11
10
10
11
3
13
14
14
9
11
14
11
13
13
6
10
16
11
9
12
11
9
17
11
17
12
11
13
15
16
6
16
17
7
13
17
8
12
16
14
15
16
11
12
11
17
11
17
11
16
13
17
10
13
15
8
15
17
12
12
10
9
6
13
12
14
6
13
11
17
10
6
6
10
13
8
15
14
12
10
14
12
13
6
4
12
8
16
13
13
5
9
12
13
7
14
11
10
8
11
14
10
7
11
9
15
13
10
7
15
14
9
5
14
10
10
13
11
16
17
16
17
11
12
16
6
8
12
10
12
9
14
9
9
12
14
15
6
9
16
11
16
10
12
11
13
16
14
12
11
15
9
9
8
12
14
17
14
13
11
11
11
10
13
13
14
17
8
6
11
14
15
11
13
7
15
11
9
12
16
10
11
12
9
14
9
9
15
11
6
11
10
15
17
13
13
9
12
7
19
10
13
10
4
15
12
13
11
15
5
17
15
9
14
14
7
17
11
14
13
13
11
18
10
15
14
6
16
13
16
7
8
12
13
12
15
5
11
12
12
15
10
9
10
16
14
6
17
9
15
14
5
14
17
16
14
8
15
9
16
15
13
8
12
14
17
17
7
12
13
18
10
12
10
11
13
15
14
17
13
14
13
13
16
5
16
17
10
14
14
16
9
6
11
16
8
15
14
12
10
10
14
7
14
13
13
9
12
10
10
11
13
8
5
5
14
15
14
10
8
15
11
10
5
16
13
12
16
11
12
8
12
11
15
10
16
11
8
14
14
8
13
12
12
13
10
17
4
9
17
17

15
8
14
12
14
13
>>> file.close()
>>> import nltk
>>> def GetNounPhrases(s):
	try:
		sentences= nltk.sent_tokenize(s)
		sentences= [nltk.word_tokenize(sent) for sent in sentences]
		sentences= [nltk.pos_tag(sent) for sent in sentences]
	except:
		return[]
	else:
		grammar= r"{<DT><NN|NNS|NNP|NNPS>*<NN|NNS|NNP|NNPS}"
		cp= nltk.RegexpParser(grammar)
		noun_phrases_list= [[''.join(leaf[0] for leaf in tree.leaves()) for tree in cp.parse(sent).subtrees() if tree.label=='NP'] for sent in sentences]
	returnnoun_phrases_list

	
>>> import itertools
>>> for group,sub in df.groupby('airline_sentiment'):
	noun_phrases= map(lambda x: GetNounPhrases, sub['text'])
	noun_phrases= list(itertools.chain.from_iterable(noun_phrases))
	AllNounPhrases= set(list(itertools.chain.from_iterable(noun_phrases)))
	filename= "Noun Phrases for" + str(group) + "Review.txt"
	file= open(filename,'a')
	for each in AllNounPhrases:
		file.write(each+ "\n")
	file.close()

	
Traceback (most recent call last):
  File "<pyshell#43>", line 3, in <module>
    noun_phrases= list(itertools.chain.from_iterable(noun_phrases))
TypeError: 'function' object is not iterable
>>> 